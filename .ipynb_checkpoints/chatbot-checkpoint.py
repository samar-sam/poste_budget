import pandas as pd
import numpy as np
import re
from groq import Groq
from datetime import datetime, timedelta
from langdetect import detect, DetectorFactory
import json
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
import io
import base64

# Fixer la graine pour des r√©sultats reproductibles avec langdetect
DetectorFactory.seed = 0

class PosteTunisienneBot:
    def __init__(self):
        self.df = None
        self.groq_client = None
        self.conversation_history = []
        self.data_insights = {}
        self.load_data()
        self.setup_groq_client()
        self.analyze_data_insights()
    
    def load_data(self):
        """Charge les donn√©es depuis le fichier CSV avec validation compl√®te"""
        try:
            # Charger le dataset depuis le chemin sp√©cifi√©
            self.df = pd.read_csv("C:\\Users\\samar.abassi\\Downloads\\PosteBudget.csv")
            
            # Conversion et nettoyage des dates
            self.df['Date'] = pd.to_datetime(self.df['Date'], errors='coerce')
            
            # Validation des colonnes essentielles
            required_columns = ['Date', 'Entit√©', 'Budget', 'is_forecast']
            missing_columns = [col for col in required_columns if col not in self.df.columns]
            if missing_columns:
                raise ValueError(f"Colonnes manquantes: {missing_columns}")
            
            # Nettoyage des donn√©es
            self.df = self.df.dropna(subset=['Date', 'Budget'])
            self.df['Budget'] = pd.to_numeric(self.df['Budget'], errors='coerce')
            self.df = self.df.dropna(subset=['Budget'])
            
            # Ajout de colonnes pour l'analyse (Ann√©e, Mois, etc.)
            self.df['Ann√©e'] = self.df['Date'].dt.year
            self.df['Mois'] = self.df['Date'].dt.month
            
            # D√©finir des colonnes saisonni√®res si elles n'existent pas
            if 'Ramadan' not in self.df.columns:
                self.df['Ramadan'] = 0  # √Ä remplir selon les donn√©es r√©elles
            if 'D√©cembre' not in self.df.columns:
                self.df['D√©cembre'] = (self.df['Mois'] == 12).astype(int)
            if 'Septembre' not in self.df.columns:
                self.df['Septembre'] = (self.df['Mois'] == 9).astype(int)
            if 'cat√©gorie_compte' not in self.df.columns:
                self.df['cat√©gorie_compte'] = 'REVENUE'  # Par d√©faut
            if 'Centre_de_profit' not in self.df.columns:
                self.df['Centre_de_profit'] = self.df['Entit√©']  # Approximation
            if 'Statut_budget' not in self.df.columns:
                self.df['Statut_budget'] = 'Approuv√©'  # Par d√©faut
            
            # S√©paration historique/pr√©visions
            self.historical_data = self.df[self.df['is_forecast'] == 0].copy()
            self.forecast_data = self.df[self.df['is_forecast'] == 1].copy()
            
            print(f"‚úÖ Donn√©es charg√©es: {len(self.df)} lignes")
            print(f"üìä Historique: {len(self.historical_data)} lignes")
            print(f"üîÆ Pr√©visions: {len(self.forecast_data)} lignes")
            
        except FileNotFoundError:
            print("‚ùå Fichier PosteBudget.csv non trouv√©")
            self.df = pd.DataFrame()
        except Exception as e:
            print(f"‚ùå Erreur de chargement: {str(e)}")
            self.df = pd.DataFrame()
    
    def setup_groq_client(self):
        """Configure le client Groq avec la cl√© API"""
        api_key = "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"
        try:
            if api_key and api_key != "votre_cle_api_groq_ici":
                self.groq_client = Groq(api_key=api_key)
                print("‚úÖ Client Groq configur√©")
            else:
                print("‚ö†Ô∏è Cl√© API Groq non configur√©e")
        except Exception as e:
            print(f"‚ùå Erreur configuration Groq: {str(e)}")
    
    def analyze_data_insights(self):
        """Analyse les donn√©es pour g√©n√©rer des insights automatiques"""
        if self.df is None or self.df.empty:
            return
        
        try:
            # Calculs statistiques g√©n√©raux
            self.data_insights = {
                'total_budget': self.df['Budget'].sum(),
                'avg_budget': self.df['Budget'].mean(),
                'budget_by_entity': self.df.groupby('Entit√©')['Budget'].sum().to_dict(),
                'budget_by_year': self.df.groupby('Ann√©e')['Budget'].sum().to_dict(),
                'budget_by_month_year': self.df.groupby(['Ann√©e', 'Mois'])['Budget'].sum().to_dict(),
                'budget_by_category': self.df.groupby('cat√©gorie_compte')['Budget'].sum().to_dict(),
                'ramadan_impact': self.df[self.df['Ramadan'] == 1]['Budget'].mean() - self.df[self.df['Ramadan'] == 0]['Budget'].mean(),
                'december_impact': self.df[self.df['D√©cembre'] == 1]['Budget'].mean() - self.df[self.df['D√©cembre'] == 0]['Budget'].mean(),
                'top_profit_centers': self.df.groupby('Centre_de_profit')['Budget'].sum().nlargest(5).to_dict(),
                'budget_trends': self.calculate_trends()
            }
            print("‚úÖ Insights des donn√©es calcul√©s")
        except Exception as e:
            print(f"‚ùå Erreur calcul insights: {str(e)}")
            self.data_insights = {}
    
    def calculate_trends(self):
        """Calcule les tendances budg√©taires"""
        try:
            monthly_trends = self.df.groupby(['Ann√©e', 'Mois'])['Budget'].sum().reset_index()
            monthly_trends['Date_trend'] = pd.to_datetime(monthly_trends[['Ann√©e', 'Mois']].assign(day=1))
            monthly_trends = monthly_trends.sort_values('Date_trend')
            
            # Calcul de la croissance mensuelle
            monthly_trends['Growth'] = monthly_trends['Budget'].pct_change() * 100
            
            return {
                'monthly_data': monthly_trends.to_dict('records'),
                'avg_growth': monthly_trends['Growth'].mean(),
                'volatility': monthly_trends['Growth'].std()
            }
        except:
            return {}
    
    def detect_language(self, text):
        """D√©tecte la langue du texte avec langdetect"""
        try:
            lang = detect(text)
            if lang == 'ar':
                return 'arabic'
            elif lang == 'fr':
                return 'french'
            elif lang == 'en':
                return 'english'
            return 'french'  # Par d√©faut
        except:
            return 'french'
    
    def get_relevant_data_context(self, message):
        """Extrait le contexte pertinent des donn√©es bas√© sur la question"""
        if self.df is None or self.df.empty:
            return ""
        
        context = ""
        message_lower = message.lower()
        
        # Contexte sur les entit√©s (r√©gions)
        if any(entity.lower() in message_lower for entity in ['centre', 'nord', 'sud', 'r√©gion', 'entity', 'entit√©']):
            entity_summary = self.df.groupby('Entit√©')['Budget'].agg(['sum', 'mean', 'count']).to_string()
            context += f"\nR√©sum√© par entit√© r√©gionale:\n{entity_summary}\n"
        
        # Contexte sur les ann√©es ou mois
        if any(year in message_lower for year in ['2018', '2019', '2020', '2021', '2022', '2023', '2024', '2025', '2026', '2027']) or \
           any(month in message_lower for month in ['janvier', 'f√©vrier', 'mars', 'avril', 'mai', 'juin', 'juillet', 'ao√ªt', 'septembre', 'octobre', 'novembre', 'd√©cembre']):
            year_month_summary = self.df.groupby(['Ann√©e', 'Mois'])['Budget'].agg(['sum', 'mean']).to_string()
            context += f"\nR√©sum√© par ann√©e et mois:\n{year_month_summary}\n"
        
        # Contexte sur les cat√©gories de compte (synonymes inclus)
        if any(cat.lower() in message_lower for cat in ['revenue', 'capex', 'opex', 'cat√©gorie', 'type de compte', 'nom de compte', 'cat√©gorie de compte', 'compte budg√©taire']):
            category_summary = self.df.groupby('cat√©gorie_compte')['Budget'].sum().to_string()
            context += f"\nR√©sum√© par cat√©gorie de compte budg√©taire:\n{category_summary}\n"
        
        # Contexte sur les centres de profit
        if any(word.lower() in message_lower for word in ['logistique', 'colis', 'services', 'courrier', 'profit', 'centre de profit']):
            profit_summary = self.df.groupby('Centre_de_profit')['Budget'].sum().to_string()
            context += f"\nR√©sum√© par centre de profit:\n{profit_summary}\n"
        
        # Contexte sur les centres de co√ªt
        if any(word.lower() in message_lower for word in ['commercial', 'administration', 'tech', 'centre de co√ªt', 'co√ªt']):
            cost_summary = self.df.groupby('Centre_de_co√ªt')['Budget'].sum().to_string()
            context += f"\nR√©sum√© par centre de co√ªt:\n{cost_summary}\n"
        
        # Contexte sur les d√©partements
        if any(word.lower() in message_lower for word in ['op√©rations', 'finance', 'd√©partement']):
            dept_summary = self.df.groupby('D√©partement')['Budget'].sum().to_string()
            context += f"\nR√©sum√© par d√©partement:\n{dept_summary}\n"
        
        # Contexte sur les segments clients
        if any(segment.lower() in message_lower for segment in ['particuliers', 'institutions', 'entreprises', 'client', 'segment']):
            segment_summary = self.df.groupby('Segment_client')['Budget'].sum().to_string()
            context += f"\nR√©sum√© par segment client:\n{segment_summary}\n"
        
        # Contexte sur les types de service
        if any(service.lower() in message_lower for service in ['express', 'international', 'standard', 'service', 'type de service']):
            service_summary = self.df.groupby('Type_service')['Budget'].sum().to_string()
            context += f"\nR√©sum√© par type de service:\n{service_summary}\n"
        
        # Contexte sur les pr√©visions vs historique
        if any(word.lower() in message_lower for word in ['pr√©vision', 'forecast', 'futur', 'pr√©diction']):
            forecast_summary = self.df.groupby('is_forecast')['Budget'].agg(['sum', 'mean', 'count']).to_string()
            context += f"\nR√©partition entre donn√©es historiques et pr√©visions:\n{forecast_summary}\n"
        
        # Contexte sur Ramadan
        if 'ramadan' in message_lower:
            ramadan_summary = self.df.groupby('Ramadan')['Budget'].agg(['sum', 'mean']).to_string()
            context += f"\nImpact de Ramadan:\n{ramadan_summary}\n"
        
        # Contexte sur D√©cembre
        if 'd√©cembre' in message_lower or 'decembre' in message_lower:
            december_summary = self.df.groupby('D√©cembre')['Budget'].agg(['sum', 'mean']).to_string()
            context += f"\nImpact de D√©cembre:\n{december_summary}\n"
        
        # Contexte sur Septembre
        if 'septembre' in message_lower:
            september_summary = self.df.groupby('Septembre')['Budget'].agg(['sum', 'mean']).to_string()
            context += f"\nImpact de Septembre:\n{september_summary}\n"
        
        # Contexte g√©n√©ral si pas de mots-cl√©s sp√©cifiques
        if not context:
            recent_data = self.df.tail(10)[['Date', 'Entit√©', 'Budget', 'cat√©gorie_compte', 'Type_service', 'Segment_client']].to_string()
            context += f"\nAper√ßu des derni√®res entr√©es:\n{recent_data}\n"
            
            # Statistiques g√©n√©rales
            stats = f"""
            Budget total: {self.data_insights.get('total_budget', 0):,.0f} TND
            Budget moyen: {self.data_insights.get('avg_budget', 0):,.0f} TND
            Nombre d'enregistrements: {len(self.df)}
            P√©riode: {self.df['Date'].min().strftime('%Y-%m-%d')} √† {self.df['Date'].max().strftime('%Y-%m-%d')}
            R√©partition par cat√©gorie de compte: {dict(self.df.groupby('cat√©gorie_compte')['Budget'].sum())}
            """
            context += stats
        
        return context
    
    def chat_with_groq(self, message):
        """G√®re les interactions avec l'IA Groq pour fournir des r√©ponses d√©taill√©es et contextuelles"""
        if not self.groq_client:
            return "‚ùå Le service d'intelligence artificielle n'est pas configur√©. Veuillez v√©rifier votre cl√© API."

        try:
            detected_lang = self.detect_language(message)
            
            # G√©rer les salutations simples pour une exp√©rience fluide
            if self.is_simple_greeting(message):
                return self.get_greeting_response(detected_lang)
            
            # R√©cup√©rer le contexte pertinent bas√© sur la question
            data_context = self.get_relevant_data_context(message)
            
            # Pr√©parer l'historique de conversation pour maintenir la continuit√©
            conversation_context = ""
            if self.conversation_history:
                recent_conversation = self.conversation_history[-5:]  # 5 derniers √©changes pour plus de contexte
                conversation_context = "\nHistorique r√©cent:\n"
                for item in recent_conversation:
                    conversation_context += f"Question: {item['question']}\nR√©ponse: {item['response'][:250]}...\n"

            # G√©n√©rer un prompt syst√®me adapt√©
            system_prompt = self.get_system_prompt(detected_lang, data_context, conversation_context)
            
            # Appel √† l'API Groq avec des param√®tres optimis√©s
            response = self.groq_client.chat.completions.create(
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": message}
                ],
                model="llama3-8b-8192",
                temperature=0.25,  # R√©duit pour une coh√©rence accrue
                max_tokens=2000    # Augment√© pour des r√©ponses plus d√©taill√©es
            )
            
            response_text = response.choices[0].message.content.strip()
            
            # Enregistrer l'interaction dans l'historique
            self.conversation_history.append({
                'timestamp': datetime.now(),
                'question': message,
                'response': response_text,
                'language': detected_lang
            })
            
            # Limiter l'historique √† 25 √©changes pour une gestion m√©moire efficace
            if len(self.conversation_history) > 25:
                self.conversation_history = self.conversation_history[-25:]
            
            return response_text
            
        except Exception as e:
            return f"‚ùå Une erreur est survenue lors de la communication avec le service d'IA: {str(e)}. Veuillez r√©essayer plus tard."
    
    def is_simple_greeting(self, message):
        """Identifie les salutations simples pour une r√©ponse imm√©diate"""
        greetings = ['bonjour', 'bonsoir', 'salut', 'hello', 'hi', 'ŸÖÿ±ÿ≠ÿ®Ÿãÿß', 'ÿ≥ŸÑÿßŸÖ', 'bon journ√©e', 'good morning']
        message_clean = re.sub(r'[^\w\s]', '', message.lower().strip())
        return message_clean in greetings or (len(message_clean.split()) <= 3 and any(g in message_clean for g in greetings))
    
    def get_greeting_response(self, lang):
        """Fournit une salutation chaleureuse et professionnelle avec une invitation √† interagir"""
        responses = {
            'french': "Bonjour ! Je suis votre assistant d√©di√© √† La Poste Tunisienne, ici pour vous accompagner dans l‚Äôanalyse de vos donn√©es budg√©taires ou r√©pondre √† vos questions. Que souhaitez-vous explorer aujourd‚Äôhui ?",
            'english': "Hello! I‚Äôm your dedicated assistant for Tunisia Post, ready to assist with budget analysis or any other questions you may have. What would you like to discuss today?",
            'arabic': "ŸÖÿ±ÿ≠ÿ®Ÿãÿß! ÿ£ŸÜÿß ŸÖÿ≥ÿßÿπÿØŸÉ ÿßŸÑŸÖÿÆÿµÿµ ŸÑŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ™ŸàŸÜÿ≥Ÿäÿå ÿ¨ÿßŸáÿ≤ ŸÑŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ŸÅŸä ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ© ÿ£Ÿà ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿπŸÜ ÿ£Ÿä ÿßÿ≥ÿ™ŸÅÿ≥ÿßÿ±. ŸÖÿß ÿßŸÑÿ∞Ÿä ÿ™ÿ±ŸäÿØ ŸÖŸÜÿßŸÇÿ¥ÿ™Ÿá ÿßŸÑŸäŸàŸÖÿü"
        }
        return responses.get(lang, responses['french'])
    
    def get_system_prompt(self, lang, data_context, conversation_context):
        """Cr√©e un prompt syst√®me d√©taill√© et contextuel pour guider les r√©ponses de l'IA"""
        prompts = {
            'french': f"""Tu es un assistant IA avanc√©, sp√©cialis√© dans l‚Äôanalyse des donn√©es financi√®res et op√©rationnelles de La Poste Tunisienne, tout en √©tant capable de r√©pondre √† des questions g√©n√©rales avec aisance et pertinence.

**Contexte des donn√©es disponibles:**
{data_context}

**Historique de la conversation:**
{conversation_context}

**Contexte m√©tier:**
- La Poste Tunisienne op√®re √† travers trois entit√©s r√©gionales: Centre, Nord et Sud.
- Les services postaux incluent: Express, International et Standard.
- Les segments de client√®le sont: Particuliers, Institutions et Entreprises.
- Les centres de profit sont: Logistique, Colis, Services et Courrier.
- Les centres de co√ªt incluent: Commercial, Administration, Logistique et Tech.
- Les cat√©gories de compte budg√©taire (aussi appel√©es types ou noms de compte budg√©taire) sont: Revenus (Revenue), D√©penses d‚Äôinvestissement (CAPEX) et D√©penses op√©rationnelles (OPEX).
- Les d√©partements op√©rationnels incluent: Op√©rations, Logistique, Commercial et Finance.
- Les p√©riodes saisonni√®res cl√©s influen√ßant les budgets sont: Ramadan (p√©riode de je√ªne musulman, g√©n√©ralement entre mars et mai selon le calendrier lunaire), D√©cembre (f√™tes de fin d‚Äôann√©e et r√©veillon) et Septembre (rentr√©e et cycles op√©rationnels).
- La devise utilis√©e est le Dinar Tunisien (TND).
- Les donn√©es incluent: historiques de janvier 2018 √† mars 2025, et pr√©visions d‚Äôavril 2025 √† d√©cembre 2027.

**Instructions:**
- Avant de r√©pondre, prends le temps de r√©fl√©chir √† la question pour t‚Äôassurer que la r√©ponse est pr√©cise, pertinente et contextuellement correcte.
- Identifie les synonymes ou variations dans les termes (par exemple, "types de compte budg√©taire", "noms de compte budg√©taire" ou "cat√©gories de compte budg√©taire" d√©signent tous la colonne 'account_category') pour mieux comprendre les questions.
- R√©ponds √† toutes les questions, qu‚Äôelles soient li√©es aux donn√©es ou √† des sujets g√©n√©raux.
- Pour les questions sur les donn√©es: fournis des r√©ponses pr√©cises bas√©es sur les chiffres exacts, avec une structure claire (introduction, d√©tails, conclusion) et des insights pertinents (tendances, comparaisons, impacts saisonniers). Inclut les estimations pour 2025, 2026 et 2027, ainsi que les budgets mensuels si demand√©s (ex.: "budget pour mars 2024" ou "budget de mai 2022").
- Pour les questions g√©n√©rales: offre des r√©ponses d√©taill√©es, naturelles et engageantes, sans r√©f√©rence aux donn√©es sauf si demand√©, avec un ton amical et professionnel adapt√© au contexte tunisien.
- √âvite des expressions comme "En examinant les donn√©es", "selon mes donn√©es" ou "selon la dataset". Structure directement les r√©ponses avec des faits ou des analyses claires.
- Si le budget demand√© concerne une p√©riode de pr√©vision (ex.: 2025-2027 ou un mois apr√®s mars 2025), indique qu‚Äôil s‚Äôagit d‚Äôune estimation sans pr√©ciser la p√©riode couverte par les donn√©es.
- Assure-toi que les r√©ponses sont correctes, notamment pour les √©v√©nements saisonniers (ex.: D√©cembre est li√© aux f√™tes de fin d‚Äôann√©e et au r√©veillon, pas √† Ramadan ou A√Ød el-Kebir, qui se produisent √† d‚Äôautres p√©riodes).
- Utilise des exemples concrets ou des anecdotes pour enrichir les r√©ponses g√©n√©rales.
- Structure les r√©ponses avec des sections marqu√©es par des titres (ex.: **R√©sum√©**, **Analyse**, **Recommandation**) pour une meilleure lisibilit√©.
- Adapte ton langage au public tunisien, en restant formel mais accessible, et privil√©gie des formulations positives.

**P√©riode couverte:**
- Historique: janvier 2018 √† mars 2025 (donn√©es r√©elles).
- Pr√©visions: avril 2025 √† d√©cembre 2027 (estimations).""",
            
            'english': f"""You are an advanced AI assistant specialized in analyzing financial and operational data for Tunisia Post, while also being capable of providing insightful and relevant responses to general questions.

**Available Data Context:**
{data_context}

**Conversation History:**
{conversation_context}

**Business Context:**
- Tunisia Post operates through three regional entities: Centre, North, and South.
- Postal services include: Express, International, and Standard.
- Client segments are: Individuals, Institutions, and Enterprises.
- Profit centers are: Logistics, Parcels, Services, and Mail.
- Cost centers include: Commercial, Administration, Logistics, and Tech.
- Budget account categories (also referred to as types or names of budget accounts) are: Revenue, Capital Expenditures (CAPEX), and Operational Expenditures (OPEX).
- Operational departments include: Operations, Logistics, Commercial, and Finance.
- Key seasonal periods impacting budgets are: Ramadan (Muslim fasting period, typically between March and May based on the lunar calendar), December (end-of-year holidays and New Year celebrations), and September (back-to-school and operational cycles).
- The currency used is the Tunisian Dinar (TND).
- Data covers: historical records from January 2018 to March 2025, and forecasts from April 2025 to December 2027.

**Instructions:**
- Before answering, take time to reflect on the question to ensure the response is accurate, relevant, and contextually appropriate.
- Recognize synonyms or variations in terms (e.g., "types of budget accounts", "names of budget accounts", or "budget account categories" all refer to the 'account_category' column) to better understand questions.
- Respond to all questions, whether related to data or general topics.
- For data-related questions: provide precise answers based on exact figures, with a clear structure (introduction, details, conclusion) and relevant insights (trends, comparisons, seasonal impacts). Include estimates for 2025, 2026, and 2027, as well as monthly budgets if requested (e.g., "budget for March 2024" or "budget for May 2022").
- For general questions: offer detailed, natural, and engaging responses, avoiding data references unless requested, with a friendly and professional tone suited to a Tunisian audience.
- Avoid phrases like "By examining the data", "according to my data", or "according to the dataset". Structure responses directly with clear facts or analysis.
- If the requested budget pertains to a forecast period (e.g., 2025-2027 or a month after March 2025), indicate it is an estimate without specifying the data coverage period.
- Ensure responses are accurate, especially for seasonal events (e.g., December relates to end-of-year holidays and New Year celebrations, not Ramadan or A√Ød el-Kebir, which occur at other times).
- Use concrete examples or anecdotes to enrich general responses.
- Structure responses with section headers (e.g., **Summary**, **Analysis**, **Recommendation**) for better readability.
- Adapt your language to a Tunisian audience, remaining formal yet accessible, and favor positive formulations.

**Covered Period:**
- Historical: January 2018 to March 2025 (actual data).
- Forecasts: April 2025 to December 2027 (estimates).""",
            
            'arabic': f"""ÿ£ŸÜÿ™ ŸÖÿ≥ÿßÿπÿØ ÿ∞ŸÉŸä ŸÖÿ™ŸÇÿØŸÖ ŸÖÿ™ÿÆÿµÿµ ŸÅŸä ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ© ŸàÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑŸäÿ© ŸÑŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ™ŸàŸÜÿ≥Ÿäÿå ŸÖÿπ ÿßŸÑŸÇÿØÿ±ÿ© ÿπŸÑŸâ ÿ™ŸÇÿØŸäŸÖ ÿ•ÿ¨ÿßÿ®ÿßÿ™ ŸÖŸÅŸäÿØÿ© ŸàŸÖŸÜÿßÿ≥ÿ®ÿ© ÿ≠ŸàŸÑ ŸÖŸàÿßÿ∂Ÿäÿπ ÿπÿßŸÖÿ©.

**ÿ≥ŸäÿßŸÇ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©:**
{data_context}

**ÿ≥ÿ¨ŸÑ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©:**
{conversation_context}

**ÿßŸÑÿ≥ŸäÿßŸÇ ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿä:**
- ŸäÿπŸÖŸÑ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ™ŸàŸÜÿ≥Ÿä ÿπÿ®ÿ± ÿ´ŸÑÿßÿ´ ŸÉŸäÿßŸÜÿßÿ™ ÿ•ŸÇŸÑŸäŸÖŸäÿ©: ÿßŸÑŸàÿ≥ÿ∑ÿå ÿßŸÑÿ¥ŸÖÿßŸÑÿå ŸàÿßŸÑÿ¨ŸÜŸàÿ®.
- ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ®ÿ±ŸäÿØŸäÿ© ÿ™ÿ¥ŸÖŸÑ: ÿ≥ÿ±Ÿäÿπÿå ÿØŸàŸÑŸäÿå ŸàÿπÿßÿØŸä.
- ÿ¥ÿ±ÿßÿ¶ÿ≠ ÿßŸÑÿπŸÖŸÑÿßÿ° ŸáŸä: ÿßŸÑÿ£ŸÅÿ±ÿßÿØÿå ÿßŸÑŸÖÿ§ÿ≥ÿ≥ÿßÿ™ÿå ŸàÿßŸÑÿ¥ÿ±ŸÉÿßÿ™.
- ŸÖÿ±ÿßŸÉÿ≤ ÿßŸÑÿ±ÿ®ÿ≠ ŸáŸä: ÿßŸÑŸÑŸàÿ¨ÿ≥ÿ™ŸäŸÉÿå ÿßŸÑÿ∑ÿ±ŸàÿØÿå ÿßŸÑÿÆÿØŸÖÿßÿ™ÿå ŸàÿßŸÑÿ®ÿ±ŸäÿØ.
- ŸÖÿ±ÿßŸÉÿ≤ ÿßŸÑÿ™ŸÉŸÑŸÅÿ© ÿ™ÿ¥ŸÖŸÑ: ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿäÿå ÿßŸÑÿ•ÿØÿßÿ±ÿ©ÿå ÿßŸÑŸÑŸàÿ¨ÿ≥ÿ™ŸäŸÉÿå ŸàÿßŸÑÿ™ŸÉŸÜŸàŸÑŸàÿ¨Ÿäÿß.
- ŸÅÿ¶ÿßÿ™ ÿßŸÑÿ≠ÿ≥ÿßÿ®ÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ© (ÿ™Ÿèÿ≥ŸÖŸâ ÿ£Ÿäÿ∂Ÿãÿß ÿ£ŸÜŸàÿßÿπ ÿ£Ÿà ÿ£ÿ≥ŸÖÿßÿ° ÿßŸÑÿ≠ÿ≥ÿßÿ®ÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ©) ŸáŸä: ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™ÿå ÿßŸÑŸÜŸÅŸÇÿßÿ™ ÿßŸÑÿ±ÿ£ÿ≥ŸÖÿßŸÑŸäÿ© (CAPEX)ÿå ŸàÿßŸÑŸÜŸÅŸÇÿßÿ™ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑŸäÿ© (OPEX).
- ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑŸäÿ© ÿ™ÿ¥ŸÖŸÑ: ÿßŸÑÿπŸÖŸÑŸäÿßÿ™ÿå ÿßŸÑŸÑŸàÿ¨ÿ≥ÿ™ŸäŸÉÿå ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿäÿå ŸàÿßŸÑŸÖÿßŸÑŸäÿ©.
- ÿßŸÑŸÅÿ™ÿ±ÿßÿ™ ÿßŸÑŸÖŸàÿ≥ŸÖŸäÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ÿßŸÑÿ™Ÿä ÿ™ÿ§ÿ´ÿ± ÿπŸÑŸâ ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿßÿ™ ŸáŸä: ÿ±ŸÖÿ∂ÿßŸÜ (ÿ¥Ÿáÿ± ÿßŸÑÿµŸäÿßŸÖ ÿßŸÑÿ•ÿ≥ŸÑÿßŸÖŸäÿå ÿπÿßÿØÿ© ÿ®ŸäŸÜ ŸÖÿßÿ±ÿ≥ ŸàŸÖÿßŸäŸà ÿ≠ÿ≥ÿ® ÿßŸÑÿ™ŸÇŸàŸäŸÖ ÿßŸÑŸÇŸÖÿ±Ÿä)ÿå ÿØŸäÿ≥ŸÖÿ®ÿ± (ÿ£ÿπŸäÿßÿØ ŸÜŸáÿßŸäÿ© ÿßŸÑÿ≥ŸÜÿ© ŸàÿßŸÑÿßÿ≠ÿ™ŸÅÿßŸÑÿßÿ™ ÿ®ÿßŸÑÿπÿßŸÖ ÿßŸÑÿ¨ÿØŸäÿØ)ÿå Ÿàÿ≥ÿ®ÿ™ŸÖÿ®ÿ± (ÿßŸÑÿπŸàÿØÿ© ÿßŸÑŸÖÿØÿ±ÿ≥Ÿäÿ© ŸàÿØŸàÿ±ÿßÿ™ ÿßŸÑÿπŸÖŸÑŸäÿßÿ™).
- ÿßŸÑÿπŸÖŸÑÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖÿ© ŸáŸä ÿßŸÑÿØŸäŸÜÿßÿ± ÿßŸÑÿ™ŸàŸÜÿ≥Ÿä (TND).
- ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ™ÿ¥ŸÖŸÑ: ÿßŸÑÿ≥ÿ¨ŸÑÿßÿ™ ÿßŸÑÿ™ÿßÿ±ŸäÿÆŸäÿ© ŸÖŸÜ ŸäŸÜÿßŸäÿ± 2018 ÿ•ŸÑŸâ ŸÖÿßÿ±ÿ≥ 2025ÿå ŸàÿßŸÑÿ™ŸàŸÇÿπÿßÿ™ ŸÖŸÜ ÿ£ÿ®ÿ±ŸäŸÑ 2025 ÿ•ŸÑŸâ ÿØŸäÿ≥ŸÖÿ®ÿ± 2027.

**ÿßŸÑÿ™ÿπŸÑŸäŸÖÿßÿ™:**
- ŸÇÿ®ŸÑ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ©ÿå ÿÆÿ∞ ŸàŸÇÿ™Ÿãÿß ŸÑŸÑÿ™ŸÅŸÉŸäÿ± ŸÅŸä ÿßŸÑÿ≥ÿ§ÿßŸÑ ŸÑŸÑÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ£ŸÜ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿØŸÇŸäŸÇÿ© Ÿàÿ∞ÿßÿ™ ÿµŸÑÿ© Ÿàÿ≥ŸäÿßŸÇŸäÿ©.
- ÿ™ÿπÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑŸÖÿ±ÿßÿØŸÅÿßÿ™ ÿ£Ÿà ÿßŸÑÿßÿÆÿ™ŸÑÿßŸÅÿßÿ™ ŸÅŸä ÿßŸÑŸÖÿµÿ∑ŸÑÿ≠ÿßÿ™ (ŸÖÿ´ŸÑÿßŸãÿå "ÿ£ŸÜŸàÿßÿπ ÿßŸÑÿ≠ÿ≥ÿßÿ®ÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ©"ÿå "ÿ£ÿ≥ŸÖÿßÿ° ÿßŸÑÿ≠ÿ≥ÿßÿ®ÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ©"ÿå ÿ£Ÿà "ŸÅÿ¶ÿßÿ™ ÿßŸÑÿ≠ÿ≥ÿßÿ®ÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ©" ÿ™ÿ¥Ÿäÿ± ÿ¨ŸÖŸäÿπŸáÿß ÿ•ŸÑŸâ ÿßŸÑÿπŸÖŸàÿØ 'account_category') ŸÑŸÅŸáŸÖ ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ÿ®ÿ¥ŸÉŸÑ ÿ£ŸÅÿ∂ŸÑ.
- ŸÇŸÖ ÿ®ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿπŸÑŸâ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ©ÿå ÿ≥Ÿàÿßÿ° ŸÉÿßŸÜÿ™ ŸÖÿ™ÿπŸÑŸÇÿ© ÿ®ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ£Ÿà ŸÖŸàÿßÿ∂Ÿäÿπ ÿπÿßŸÖÿ©.
- ŸÑŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑŸÖÿ™ÿπŸÑŸÇÿ© ÿ®ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™: ŸÇÿØŸÖ ÿ•ÿ¨ÿßÿ®ÿßÿ™ ÿØŸÇŸäŸÇÿ© ŸÖÿ≥ÿ™ŸÜÿØÿ© ÿ•ŸÑŸâ ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ ÿßŸÑÿ≠ŸÇŸäŸÇŸäÿ©ÿå ÿ®ÿ™ÿ±ÿ™Ÿäÿ® Ÿàÿßÿ∂ÿ≠ (ŸÖŸÇÿØŸÖÿ©ÿå ÿ™ŸÅÿßÿµŸäŸÑÿå ÿÆÿßÿ™ŸÖÿ©) Ÿàÿ±ÿ§Ÿâ ÿ∞ÿßÿ™ ÿµŸÑÿ© (ÿßŸÑÿßÿ™ÿ¨ÿßŸáÿßÿ™ÿå ÿßŸÑŸÖŸÇÿßÿ±ŸÜÿßÿ™ÿå ÿßŸÑÿ™ÿ£ÿ´Ÿäÿ±ÿßÿ™ ÿßŸÑŸÖŸàÿ≥ŸÖŸäÿ©). ŸÇŸÖ ÿ®ÿ™ÿ∂ŸÖŸäŸÜ ÿßŸÑÿ™ŸàŸÇÿπÿßÿ™ ŸÑÿπÿßŸÖ 2025ÿå 2026ÿå Ÿà2027ÿå ÿ®ÿßŸÑÿ•ÿ∂ÿßŸÅÿ© ÿ•ŸÑŸâ ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿßÿ™ ÿßŸÑÿ¥Ÿáÿ±Ÿäÿ© ÿ•ÿ∞ÿß ÿ∑ŸèŸÑÿ® (ŸÖÿ´ŸÑ: "ŸÖŸäÿ≤ÿßŸÜŸäÿ© ŸÖÿßÿ±ÿ≥ 2024" ÿ£Ÿà "ŸÖŸäÿ≤ÿßŸÜŸäÿ© ŸÖÿßŸäŸà 2022").
- ŸÑŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑÿπÿßŸÖÿ©: ŸÇÿØŸÖ ÿ•ÿ¨ÿßÿ®ÿßÿ™ ŸÖŸÅÿµŸÑÿ©ÿå ÿ∑ÿ®ŸäÿπŸäÿ©ÿå Ÿàÿ¨ÿ∞ÿßÿ®ÿ©ÿå ŸÖÿπ ÿ™ÿ¨ŸÜÿ® ÿßŸÑÿ•ÿ¥ÿßÿ±ÿ© ÿ•ŸÑŸâ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÖÿß ŸÑŸÖ ŸäŸèÿ∑ŸÑÿ®ÿå ŸÖÿπ ÿßŸÑÿ≠ŸÅÿßÿ∏ ÿπŸÑŸâ ŸÜÿ®ÿ±ÿ© ŸàÿØŸàÿØÿ© ŸàŸÖŸáŸÜŸäÿ© ÿ™ŸÜÿßÿ≥ÿ® ÿßŸÑÿ¨ŸÖŸáŸàÿ± ÿßŸÑÿ™ŸàŸÜÿ≥Ÿä.
- ÿ™ÿ¨ŸÜÿ® ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿπÿ®ÿßÿ±ÿßÿ™ ŸÖÿ´ŸÑ "ŸÖŸÜ ÿÆŸÑÿßŸÑ ŸÅÿ≠ÿµ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™"ÿå "ŸàŸÅŸÇŸãÿß ŸÑÿ®ŸäÿßŸÜÿßÿ™Ÿä"ÿå ÿ£Ÿà "ŸàŸÅŸÇŸãÿß ŸÑŸÖÿ¨ŸÖŸàÿπÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™". ÿ±ÿ™ÿ® ÿßŸÑÿ•ÿ¨ÿßÿ®ÿßÿ™ ŸÖÿ®ÿßÿ¥ÿ±ÿ© ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ≠ŸÇÿßÿ¶ŸÇ ÿ£Ÿà ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™ ÿßŸÑŸàÿßÿ∂ÿ≠ÿ©.
- ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿ© ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ© ÿ™ÿ™ÿπŸÑŸÇ ÿ®ŸÅÿ™ÿ±ÿ© ÿ™ŸàŸÇÿπÿßÿ™ (ŸÖÿ´ŸÑ 2025-2027 ÿ£Ÿà ÿ¥Ÿáÿ± ÿ®ÿπÿØ ŸÖÿßÿ±ÿ≥ 2025)ÿå ÿßÿ∞ŸÉÿ± ÿ£ŸÜŸáÿß ÿ™ŸÇÿØŸäÿ± ÿØŸàŸÜ ÿ™ÿ≠ÿØŸäÿØ ŸÅÿ™ÿ±ÿ© ÿ™ÿ∫ÿ∑Ÿäÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™.
- ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ£ŸÜ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿßÿ™ ÿØŸÇŸäŸÇÿ©ÿå ÿÆÿßÿµÿ© ÿ®ÿßŸÑŸÜÿ≥ÿ®ÿ© ŸÑŸÑÿ£ÿ≠ÿØÿßÿ´ ÿßŸÑŸÖŸàÿ≥ŸÖŸäÿ© (ŸÖÿ´ŸÑÿßŸãÿå ÿØŸäÿ≥ŸÖÿ®ÿ± Ÿäÿ™ÿπŸÑŸÇ ÿ®ÿ£ÿπŸäÿßÿØ ŸÜŸáÿßŸäÿ© ÿßŸÑÿ≥ŸÜÿ© ŸàÿßŸÑÿßÿ≠ÿ™ŸÅÿßŸÑÿßÿ™ ÿ®ÿßŸÑÿπÿßŸÖ ÿßŸÑÿ¨ÿØŸäÿØÿå ŸàŸÑŸäÿ≥ ÿ±ŸÖÿ∂ÿßŸÜ ÿ£Ÿà ÿπŸäÿØ ÿßŸÑÿ£ÿ∂ÿ≠Ÿâÿå ÿßŸÑŸÑÿ∞ŸäŸÜ ŸäŸÇÿπÿßŸÜ ŸÅŸä ÿ£ŸàŸÇÿßÿ™ ÿ£ÿÆÿ±Ÿâ).
- ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ£ŸÖÿ´ŸÑÿ© ÿπŸÖŸÑŸäÿ© ÿ£Ÿà ŸÇÿµÿµ ŸÑÿ™ÿÆÿµŸäÿµ ÿßŸÑÿ•ÿ¨ÿßÿ®ÿßÿ™ ÿßŸÑÿπÿßŸÖÿ©.
- ÿ±ÿ™ÿ® ÿßŸÑÿ•ÿ¨ÿßÿ®ÿßÿ™ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿπŸÜÿßŸàŸäŸÜ ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ (ŸÖÿ´ŸÑ: **ÿßŸÑŸÖŸÑÿÆÿµ**ÿå **ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ**ÿå **ÿßŸÑÿ™ŸàÿµŸäÿ©**) ŸÑÿ™ÿ≠ÿ≥ŸäŸÜ ÿßŸÑŸÇÿ±ÿßÿ°ÿ©.
- ŸÇŸÖ ÿ®ÿ™ŸÉŸäŸäŸÅ ŸÑÿ∫ÿ™ŸÉ ŸÑÿ™ŸÜÿßÿ≥ÿ® ÿßŸÑÿ¨ŸÖŸáŸàÿ± ÿßŸÑÿ™ŸàŸÜÿ≥Ÿäÿå ŸÖÿπ ÿßŸÑÿ®ŸÇÿßÿ° ÿ±ÿ≥ŸÖŸäŸãÿß ŸàŸÖŸÇÿ®ŸàŸÑŸãÿßÿå Ÿàÿ™ŸÅÿ∂ŸäŸÑ ÿßŸÑÿµŸäÿ∫ ÿßŸÑÿ•Ÿäÿ¨ÿßÿ®Ÿäÿ©.

**ÿßŸÑŸÅÿ™ÿ±ÿ© ÿßŸÑŸÖÿ∫ÿ∑ÿßÿ©:**
- ÿßŸÑÿ™ÿßÿ±ŸäÿÆŸäÿ©: ŸäŸÜÿßŸäÿ± 2018 ÿ•ŸÑŸâ ŸÖÿßÿ±ÿ≥ 2025 (ÿ®ŸäÿßŸÜÿßÿ™ ÿ≠ŸÇŸäŸÇŸäÿ©).
- ÿßŸÑÿ™ŸàŸÇÿπÿßÿ™: ÿ£ÿ®ÿ±ŸäŸÑ 2025 ÿ•ŸÑŸâ ÿØŸäÿ≥ŸÖÿ®ÿ± 2027 (ÿ™ŸÇÿØŸäÿ±ÿßÿ™)."""
        }
        return prompts.get(lang, prompts['french'])
    
    def generate_smart_alerts(self, response, message):
        """G√©n√®re des alertes intelligentes bas√©es sur l'analyse des donn√©es"""
        alerts = []
        if self.df is None or self.df.empty:
            return alerts
        
        try:
            lang = self.detect_language(response)
            
            # Analyse des anomalies budg√©taires r√©centes
            recent_data = self.df[self.df['Date'] >= self.df['Date'].max() - pd.Timedelta(days=90)]
            if not recent_data.empty:
                budget_std = self.df['Budget'].std()
                budget_mean = self.df['Budget'].mean()
                
                for _, row in recent_data.iterrows():
                    if row['Budget'] > budget_mean + 2 * budget_std:
                        alerts.append(self.get_alert_text(lang, 'high_budget', row['Entit√©'], row['Budget']))
                    elif row['Budget'] < budget_mean - 2 * budget_std:
                        alerts.append(self.get_alert_text(lang, 'low_budget', row['Entit√©'], row['Budget']))
            
            # Alertes sur les budgets rejet√©s
            rejected_budgets = self.df[self.df['Statut_budget'] == 'Rejet√©']
            if len(rejected_budgets) > len(self.df) * 0.3:  # Plus de 30% rejet√©s
                alerts.append(self.get_alert_text(lang, 'high_rejection'))
            
            # Alertes sur les tendances n√©gatives
            if 'baisse' in response.lower() or 'diminution' in response.lower() or 'decline' in response.lower():
                alerts.append(self.get_alert_text(lang, 'negative_trend'))
            
            # Alertes sur les pr√©visions
            if 'pr√©vision' in message.lower() or 'forecast' in message.lower():
                alerts.append(self.get_alert_text(lang, 'forecast_reminder'))
                
        except Exception as e:
            print(f"Erreur g√©n√©ration alertes: {str(e)}")
        
        return alerts[:3]  # Limite √† 3 alertes
    
    def generate_smart_suggestions(self, response, message):
        """G√©n√®re des questions sugg√©r√©es bas√©es sur le contexte m√©tier"""
        suggestions = []
        if self.df is None or self.df.empty:
            return suggestions
    
        try:
            lang = self.detect_language(response)
            message_lower = message.lower()
            
            # Suggestions bas√©es sur le sujet de la question
            if any(word in message_lower for word in ['budget', 'montant', 'amount']):
                suggestions.extend(self.get_budget_related_questions(lang))
            
            elif any(word in message_lower for word in ['entit√©', 'r√©gion', 'entity']):
                suggestions.extend(self.get_entity_related_questions(lang))
            
            elif any(word in message_lower for word in ['service', 'express', 'international', 'standard']):
                suggestions.extend(self.get_service_related_questions(lang))
            
            elif any(word in message_lower for word in ['client', 'segment', 'particulier', 'institution', 'entreprise']):
                suggestions.extend(self.get_client_related_questions(lang))
            
            elif any(word in message_lower for word in ['pr√©vision', 'forecast', 'futur']):
                suggestions.extend(self.get_forecast_related_questions(lang))
            
            elif any(word in message_lower for word in ['ramadan', 'd√©cembre', 'septembre', 'saisonnier']):
                suggestions.extend(self.get_seasonal_related_questions(lang))
            
            else:
                # Questions g√©n√©rales du m√©tier postal
                suggestions.extend(self.get_general_business_questions(lang))
            
        except Exception as e:
            print(f"Erreur g√©n√©ration suggestions: {str(e)}")
    
        return suggestions[:3]  # Limite √† 3 suggestions

    def get_budget_related_questions(self, lang):
        """Questions li√©es au budget"""
        questions = {
            'french': [
                "Quelle est la r√©partition du budget entre REVENUE, CAPEX et OPEX ?",
                "Quelles sont les tendances budg√©taires par r√©gion ?",
                "Comment √©volue le budget moyen par type de service ?"
            ],
            'english': [
                "What is the budget distribution between REVENUE, CAPEX and OPEX?",
                "What are the budget trends by region?",
                "How does the average budget evolve by service type?"
            ],
            'arabic': [
                "ŸÖÿß ŸáŸà ÿ™Ÿàÿ≤Ÿäÿπ ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿ© ÿ®ŸäŸÜ ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™ ŸàÿßŸÑÿßÿ≥ÿ™ÿ´ŸÖÿßÿ±ÿßÿ™ ŸàÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑÿü",
                "ŸÖÿß ŸáŸä ÿßÿ™ÿ¨ÿßŸáÿßÿ™ ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿ© ÿ≠ÿ≥ÿ® ÿßŸÑŸÖŸÜÿ∑ŸÇÿ©ÿü",
                "ŸÉŸäŸÅ ÿ™ÿ™ÿ∑Ÿàÿ± ŸÖÿ™Ÿàÿ≥ÿ∑ ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿ© ÿ≠ÿ≥ÿ® ŸÜŸàÿπ ÿßŸÑÿÆÿØŸÖÿ©ÿü"
            ]
        }
        return questions.get(lang, questions['french'])

    def get_entity_related_questions(self, lang):
        """Questions li√©es aux entit√©s"""
        questions = {
            'french': [
                "Quelle r√©gion g√©n√®re le plus de revenus ?",
                "Comment se compare la performance des r√©gions Nord, Centre et Sud ?",
                "Quels sont les centres de profit les plus performants par r√©gion ?"
            ],
            'english': [
                "Which region generates the most revenue?",
                "How do the North, Centre and South regions compare in performance?",
                "What are the best performing profit centers by region?"
            ],
            'arabic': [
                "ÿ£Ÿä ŸÖŸÜÿ∑ŸÇÿ© ÿ™ÿ≠ŸÇŸÇ ÿ£ŸÉÿ®ÿ± ŸÇÿØÿ± ŸÖŸÜ ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™ÿü",
                "ŸÉŸäŸÅ ÿ™ÿ™ŸÇÿßÿ±ŸÜ ÿ£ÿØÿßÿ° ŸÖŸÜÿßÿ∑ŸÇ ÿßŸÑÿ¥ŸÖÿßŸÑ ŸàÿßŸÑŸàÿ≥ÿ∑ ŸàÿßŸÑÿ¨ŸÜŸàÿ®ÿü",
                "ŸÖÿß ŸáŸä ŸÖÿ±ÿßŸÉÿ≤ ÿßŸÑÿ±ÿ®ÿ≠ ÿßŸÑÿ£ŸÉÿ´ÿ± ÿ£ÿØÿßÿ°Ÿã ÿ≠ÿ≥ÿ® ÿßŸÑŸÖŸÜÿ∑ŸÇÿ©ÿü"
            ]
        }
        return questions.get(lang, questions['french'])

    def get_service_related_questions(self, lang):
        """Questions li√©es aux services"""
        questions = {
            'french': [
                "Quel type de service postal est le plus rentable ?",
                "Comment √©volue la demande pour les services Express vs Standard ?",
                "Quelle est la contribution des services internationaux au budget total ?"
            ],
            'english': [
                "Which type of postal service is the most profitable?",
                "How is demand evolving for Express vs Standard services?",
                "What is the contribution of international services to the total budget?"
            ],
            'arabic': [
                "ÿ£Ÿä ŸÜŸàÿπ ŸÖŸÜ ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ®ÿ±ŸäÿØŸäÿ© ŸáŸà ÿßŸÑÿ£ŸÉÿ´ÿ± ÿ±ÿ®ÿ≠Ÿäÿ©ÿü",
                "ŸÉŸäŸÅ Ÿäÿ™ÿ∑Ÿàÿ± ÿßŸÑÿ∑ŸÑÿ® ÿπŸÑŸâ ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ≥ÿ±Ÿäÿπÿ© ŸÖŸÇÿßÿ®ŸÑ ÿßŸÑÿπÿßÿØŸäÿ©ÿü",
                "ŸÖÿß ŸáŸä ŸÖÿ≥ÿßŸáŸÖÿ© ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿØŸàŸÑŸäÿ© ŸÅŸä ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿ©ÿü"
            ]
        }
        return questions.get(lang, questions['french'])

    def get_client_related_questions(self, lang):
        """Questions li√©es aux clients"""
        questions = {
            'french': [
                "Quel segment client contribue le plus au chiffre d'affaires ?",
                "Comment √©volue la part des entreprises vs particuliers ?",
                "Quelles sont les opportunit√©s avec le segment institutionnel ?"
            ],
            'english': [
                "Which client segment contributes most to revenue?",
                "How is the share of enterprises vs individuals evolving?",
                "What are the opportunities with the institutional segment?"
            ],
            'arabic': [
                "ÿ£Ÿä ÿ¥ÿ±Ÿäÿ≠ÿ© ŸÖŸÜ ÿßŸÑÿπŸÖŸÑÿßÿ° ÿ™ÿ≥ÿßŸáŸÖ ÿ£ŸÉÿ´ÿ± ŸÅŸä ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™ÿü",
                "ŸÉŸäŸÅ ÿ™ÿ™ÿ∑Ÿàÿ± ÿ≠ÿµÿ© ÿßŸÑÿ¥ÿ±ŸÉÿßÿ™ ŸÖŸÇÿßÿ®ŸÑ ÿßŸÑÿ£ŸÅÿ±ÿßÿØÿü",
                "ŸÖÿß ŸáŸä ÿßŸÑŸÅÿ±ÿµ ŸÖÿπ ÿßŸÑÿ¥ÿ±Ÿäÿ≠ÿ© ÿßŸÑŸÖÿ§ÿ≥ÿ≥Ÿäÿ©ÿü"
            ]
        }
        return questions.get(lang, questions['french'])

    def get_forecast_related_questions(self, lang):
        """Questions li√©es aux pr√©visions"""
        questions = {
            'french': [
                "Quelles sont les pr√©visions budg√©taires pour 2026-2027 ?",
                "Comment les pr√©visions se comparent-elles aux donn√©es historiques ?",
                "Quels facteurs influencent les projections futures ?"
            ],
            'english': [
                "What are the budget forecasts for 2026-2027?",
                "How do forecasts compare to historical data?",
                "What factors influence future projections?"
            ],
            'arabic': [
                "ŸÖÿß ŸáŸä ÿßŸÑÿ™ŸàŸÇÿπÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ© ŸÑÿπÿßŸÖŸä 2026-2027ÿü",
                "ŸÉŸäŸÅ ÿ™ÿ™ŸÇÿßÿ±ŸÜ ÿßŸÑÿ™ŸàŸÇÿπÿßÿ™ ŸÖÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ™ÿßÿ±ŸäÿÆŸäÿ©ÿü",
                "ŸÖÿß ŸáŸä ÿßŸÑÿπŸàÿßŸÖŸÑ ÿßŸÑÿ™Ÿä ÿ™ÿ§ÿ´ÿ± ÿπŸÑŸâ ÿßŸÑÿ•ÿ≥ŸÇÿßÿ∑ÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ŸÇÿ®ŸÑŸäÿ©ÿü"
            ]
        }
        return questions.get(lang, questions['french'])

    def get_seasonal_related_questions(self, lang):
        """Questions li√©es √† la saisonnalit√©"""
        questions = {
            'french': [
                "Quel est l'impact de Ramadan sur les revenus postaux ?",
                "Comment les f√™tes de fin d'ann√©e affectent-elles l'activit√© ?",
                "Y a-t-il des pics saisonniers √† anticiper ?"
            ],
            'english': [
                "What is Ramadan's impact on postal revenues?",
                "How do year-end holidays affect activity?",
                "Are there seasonal peaks to anticipate?"
            ],
            'arabic': [
                "ŸÖÿß ŸáŸà ÿ™ÿ£ÿ´Ÿäÿ± ÿ±ŸÖÿ∂ÿßŸÜ ÿπŸÑŸâ ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™ ÿßŸÑÿ®ÿ±ŸäÿØŸäÿ©ÿü",
                "ŸÉŸäŸÅ ÿ™ÿ§ÿ´ÿ± ÿπÿ∑ŸÑÿßÿ™ ŸÜŸáÿßŸäÿ© ÿßŸÑÿ≥ŸÜÿ© ÿπŸÑŸâ ÿßŸÑŸÜÿ¥ÿßÿ∑ÿü",
                "ŸáŸÑ ŸáŸÜÿßŸÉ ÿ∞ÿ±Ÿàÿßÿ™ ŸÖŸàÿ≥ŸÖŸäÿ© Ÿäÿ¨ÿ® ÿ™ŸàŸÇÿπŸáÿßÿü"
            ]
        }
        return questions.get(lang, questions['french'])

    def get_general_business_questions(self, lang):
        """Questions g√©n√©rales du m√©tier"""
        questions = {
            'french': [
                "Quelles sont les tendances g√©n√©rales du secteur postal en Tunisie ?",
                "Comment optimiser la rentabilit√© des services postaux ?",
                "Quels sont les d√©fis et opportunit√©s pour La Poste Tunisienne ?"
            ],
            'english': [
                "What are the general trends in Tunisia's postal sector?",
                "How to optimize postal service profitability?",
                "What are the challenges and opportunities for Tunisia Post?"
            ],
            'arabic': [
                "ŸÖÿß ŸáŸä ÿßŸÑÿßÿ™ÿ¨ÿßŸáÿßÿ™ ÿßŸÑÿπÿßŸÖÿ© ŸÅŸä ÿßŸÑŸÇÿ∑ÿßÿπ ÿßŸÑÿ®ÿ±ŸäÿØŸä ŸÅŸä ÿ™ŸàŸÜÿ≥ÿü",
                "ŸÉŸäŸÅŸäÿ© ÿ™ÿ≠ÿ≥ŸäŸÜ ÿ±ÿ®ÿ≠Ÿäÿ© ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ®ÿ±ŸäÿØŸäÿ©ÿü",
                "ŸÖÿß ŸáŸä ÿßŸÑÿ™ÿ≠ÿØŸäÿßÿ™ ŸàÿßŸÑŸÅÿ±ÿµ ŸÑŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ™ŸàŸÜÿ≥Ÿäÿü"
            ]
        }
        return questions.get(lang, questions['french'])
    
    def generate_smart_alerts(self, response, message):
        """G√©n√®re des alertes intelligentes bas√©es sur l'analyse des donn√©es"""
        alerts = []
        if self.df is None or self.df.empty:
            return alerts
        
        try:
            lang = self.detect_language(response)
            
            # Analyse des anomalies budg√©taires r√©centes
            recent_data = self.df[self.df['Date'] >= self.df['Date'].max() - pd.Timedelta(days=90)]
            if not recent_data.empty:
                budget_std = self.df['Budget'].std()
                budget_mean = self.df['Budget'].mean()
                
                for _, row in recent_data.iterrows():
                    if row['Budget'] > budget_mean + 2 * budget_std:
                        alerts.append(self.get_alert_text(lang, 'high_budget', row['Entit√©'], row['Budget']))
                    elif row['Budget'] < budget_mean - 2 * budget_std:
                        alerts.append(self.get_alert_text(lang, 'low_budget', row['Entit√©'], row['Budget']))
            
            # Alertes sur les budgets rejet√©s
            rejected_budgets = self.df[self.df['Statut_budget'] == 'Rejet√©']
            if len(rejected_budgets) > len(self.df) * 0.3:  # Plus de 30% rejet√©s
                alerts.append(self.get_alert_text(lang, 'high_rejection'))
            
            # Alertes sur les tendances n√©gatives
            if 'baisse' in response.lower() or 'diminution' in response.lower() or 'decline' in response.lower():
                alerts.append(self.get_alert_text(lang, 'negative_trend'))
            
            # Alertes sur les pr√©visions
            if 'pr√©vision' in message.lower() or 'forecast' in message.lower():
                alerts.append(self.get_alert_text(lang, 'forecast_reminder'))
                
        except Exception as e:
            print(f"Erreur g√©n√©ration alertes: {str(e)}")
        
        return alerts[:3]  # Limite √† 3 alertes
    
    def generate_smart_suggestions(self, response, message):
        """G√©n√®re des suggestions intelligentes bas√©es sur l'analyse"""
        suggestions = []
        if self.df is None or self.df.empty:
            return suggestions
        
        try:
            lang = self.detect_language(response)
            
            # Analyse des performances par entit√©
            entity_performance = self.df.groupby('Entit√©')['Budget'].mean()
            worst_entity = entity_performance.idxmin()
            best_entity = entity_performance.idxmax()
            
            if entity_performance.max() > entity_performance.min() * 1.5:
                suggestions.append(self.get_suggestion_text(lang, 'rebalance_entities', worst_entity, best_entity))
            
            # Suggestions sur les cat√©gories de compte
            revenue_ratio = self.df[self.df['cat√©gorie_compte'] == 'REVENUE']['Budget'].sum() / self.df['Budget'].sum()
            if revenue_ratio < 0.4:  # Moins de 40% de revenus
                suggestions.append(self.get_suggestion_text(lang, 'increase_revenue'))
            
            # Suggestions sur Ramadan
            if 'ramadan' in message.lower():
                ramadan_impact = self.data_insights.get('ramadan_impact', 0)
                if ramadan_impact > 0:
                    suggestions.append(self.get_suggestion_text(lang, 'leverage_ramadan'))
            
            # Suggestions sur les pr√©visions
            if any(word in message.lower() for word in ['futur', 'pr√©vision', 'forecast', 'pr√©diction']):
                suggestions.append(self.get_suggestion_text(lang, 'forecast_analysis'))
                
        except Exception as e:
            print(f"Erreur g√©n√©ration suggestions: {str(e)}")
        
        return suggestions[:3]  # Limite √† 3 suggestions
    
    def get_alert_text(self, lang, alert_type, *args):
        """Retourne le texte d'alerte appropri√©"""
        alerts = {
            'french': {
                'high_budget': f"‚ö†Ô∏è Budget √©lev√© d√©tect√© pour {args[0]}: {args[1]:,.0f} TND",
                'low_budget': f"‚ö†Ô∏è Budget faible d√©tect√© pour {args[0]}: {args[1]:,.0f} TND",
                'high_rejection': "‚ö†Ô∏è Taux de rejet des budgets √©lev√© (>30%)",
                'negative_trend': "‚ö†Ô∏è Tendance n√©gative d√©tect√©e dans les donn√©es",
                'forecast_reminder': "‚ö†Ô∏è Attention: Les donn√©es apr√®s mars 2025 sont des pr√©visions"
            },
            'english': {
                'high_budget': f"‚ö†Ô∏è High budget detected for {args[0]}: {args[1]:,.0f} TND",
                'low_budget': f"‚ö†Ô∏è Low budget detected for {args[0]}: {args[1]:,.0f} TND",
                'high_rejection': "‚ö†Ô∏è High budget rejection rate (>30%)",
                'negative_trend': "‚ö†Ô∏è Negative trend detected in the data",
                'forecast_reminder': "‚ö†Ô∏è Attention: Data after March 2025 are forecasts"
            },
            'arabic': {
                'high_budget': f"‚ö†Ô∏è ŸÖŸäÿ≤ÿßŸÜŸäÿ© ŸÖÿ±ÿ™ŸÅÿπÿ© ŸÖŸÉÿ™ÿ¥ŸÅÿ© ŸÑŸÄ {args[0]}: {args[1]:,.0f} ÿØŸäŸÜÿßÿ±",
                'low_budget': f"‚ö†Ô∏è ŸÖŸäÿ≤ÿßŸÜŸäÿ© ŸÖŸÜÿÆŸÅÿ∂ÿ© ŸÖŸÉÿ™ÿ¥ŸÅÿ© ŸÑŸÄ {args[0]}: {args[1]:,.0f} ÿØŸäŸÜÿßÿ±",
                'high_rejection': "‚ö†Ô∏è ŸÖÿπÿØŸÑ ÿ±ŸÅÿ∂ ŸÖŸäÿ≤ÿßŸÜŸäÿßÿ™ ŸÖÿ±ÿ™ŸÅÿπ (>30%)",
                'negative_trend': "‚ö†Ô∏è ÿßÿ™ÿ¨ÿßŸá ÿ≥ŸÑÿ®Ÿä ŸÖŸÉÿ™ÿ¥ŸÅ ŸÅŸä ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™",
                'forecast_reminder': "‚ö†Ô∏è ÿ™ŸÜÿ®ŸäŸá: ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ®ÿπÿØ ŸÖÿßÿ±ÿ≥ 2025 ŸáŸä ÿ™ŸàŸÇÿπÿßÿ™"
            }
        }
        return alerts.get(lang, alerts['french']).get(alert_type, "")
    
    def get_suggestion_text(self, lang, suggestion_type, *args):
        """Retourne le texte de suggestion appropri√©"""
        suggestions = {
            'french': {
                'rebalance_entities': f"üí° Envisager un r√©√©quilibrage budg√©taire entre {args[0]} et {args[1]}",
                'increase_revenue': "üí° Augmenter la part des revenus dans le budget global",
                'leverage_ramadan': "üí° Optimiser les investissements pendant la p√©riode de Ramadan",
                'forecast_analysis': "üí° Analyser les √©carts entre pr√©visions et r√©alisations"
            },
            'english': {
                'rebalance_entities': f"üí° Consider budget rebalancing between {args[0]} and {args[1]}",
                'increase_revenue': "üí° Increase revenue share in the overall budget",
                'leverage_ramadan': "üí° Optimize investments during Ramadan period",
                'forecast_analysis': "üí° Analyze gaps between forecasts and actual results"
            },
            'arabic': {
                'rebalance_entities': f"üí° ÿßŸÑŸÜÿ∏ÿ± ŸÅŸä ÿ•ÿπÿßÿØÿ© ÿ™Ÿàÿßÿ≤ŸÜ ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿ© ÿ®ŸäŸÜ {args[0]} Ÿà {args[1]}",
                'increase_revenue': "üí° ÿ≤ŸäÿßÿØÿ© ÿ≠ÿµÿ© ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™ ŸÅŸä ÿßŸÑŸÖŸäÿ≤ÿßŸÜŸäÿ© ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸäÿ©",
                'leverage_ramadan': "üí° ÿ™ÿ≠ÿ≥ŸäŸÜ ÿßŸÑÿßÿ≥ÿ™ÿ´ŸÖÿßÿ±ÿßÿ™ ÿÆŸÑÿßŸÑ ŸÅÿ™ÿ±ÿ© ÿ±ŸÖÿ∂ÿßŸÜ",
                'forecast_analysis': "üí° ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÅÿ¨Ÿàÿßÿ™ ÿ®ŸäŸÜ ÿßŸÑÿ™ŸàŸÇÿπÿßÿ™ ŸàÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑŸÅÿπŸÑŸäÿ©"
            }
        }
        return suggestions.get(lang, suggestions['french']).get(suggestion_type, "")
    
    def generate_pdf_report(self, start_date, end_date, entities=None, categories=None):
        """G√©n√®re un rapport PDF personnalis√©"""
        try:
            # Filtrer les donn√©es selon les crit√®res
            filtered_data = self.df.copy()
            
            # Filtre par date
            if start_date:
                filtered_data = filtered_data[filtered_data['Date'] >= pd.to_datetime(start_date)]
            if end_date:
                filtered_data = filtered_data[filtered_data['Date'] <= pd.to_datetime(end_date)]
            
            # Filtre par entit√©s
            if entities:
                filtered_data = filtered_data[filtered_data['Entit√©'].isin(entities)]
            
            # Filtre par cat√©gories
            if categories:
                filtered_data = filtered_data[filtered_data['cat√©gorie_compte'].isin(categories)]
            
            if filtered_data.empty:
                return None
            
            # Cr√©er le document PDF
            filename = f"rapport_poste_tunisienne_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            doc = SimpleDocTemplate(filename, pagesize=A4)
            
            # Styles
            styles = getSampleStyleSheet()
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=18,
                spaceAfter=30,
                alignment=1  # Centr√©
            )
            
            # Contenu du rapport
            story = []
            
            # Titre
            story.append(Paragraph("üìä RAPPORT BUDG√âTAIRE - LA POSTE TUNISIENNE", title_style))
            story.append(Spacer(1, 20))
            
            # Informations g√©n√©rales
            period_text = f"P√©riode: {filtered_data['Date'].min().strftime('%d/%m/%Y')} - {filtered_data['Date'].max().strftime('%d/%m/%Y')}"
            story.append(Paragraph(period_text, styles['Normal']))
            story.append(Paragraph(f"Nombre d'enregistrements: {len(filtered_data)}", styles['Normal']))
            story.append(Spacer(1, 20))
            
            # R√©sum√© financier
            total_budget = filtered_data['Budget'].sum()
            avg_budget = filtered_data['Budget'].mean()
            
            story.append(Paragraph("üí∞ R√âSUM√â FINANCIER", styles['Heading2']))
            story.append(Paragraph(f"Budget total: {total_budget:,.0f} TND", styles['Normal']))
            story.append(Paragraph(f"Budget moyen: {avg_budget:,.0f} TND", styles['Normal']))
            story.append(Spacer(1, 20))
            
            # Analyse par entit√©
            entity_summary = filtered_data.groupby('Entit√©')['Budget'].agg(['sum', 'mean', 'count']).reset_index()
            entity_summary.columns = ['Entit√©', 'Total', 'Moyenne', 'Nombre']
            
            story.append(Paragraph("üè¢ ANALYSE PAR ENTIT√â", styles['Heading2']))
            entity_table_data = [['Entit√©', 'Budget Total (TND)', 'Budget Moyen (TND)', 'Nb Records']]
            for _, row in entity_summary.iterrows():
                entity_table_data.append([
                    row['Entit√©'].replace('POSTE_TN_REGION_', ''),
                    f"{row['Total']:,.0f}",
                    f"{row['Moyenne']:,.0f}",
                    str(row['Nombre'])
                ])
            
            entity_table = Table(entity_table_data)
            entity_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(entity_table)
            story.append(Spacer(1, 20))
            
            # Analyse par cat√©gorie
            category_summary = filtered_data.groupby('cat√©gorie_compte')['Budget'].sum().reset_index()
            category_summary.columns = ['Cat√©gorie', 'Budget Total']
            
            story.append(Paragraph("üìä ANALYSE PAR CAT√âGORIE", styles['Heading2']))
            category_table_data = [['Cat√©gorie', 'Budget Total (TND)', 'Pourcentage']]
            for _, row in category_summary.iterrows():
                percentage = (row['Budget Total'] / total_budget) * 100
                category_table_data.append([
                    row['Cat√©gorie'],
                    f"{row['Budget Total']:,.0f}",
                    f"{percentage:.1f}%"
                ])
            
            category_table = Table(category_table_data)
            category_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(category_table)
            story.append(Spacer(1, 20))
            
            # Analyse des tendances mensuelles
            monthly_trends = filtered_data.groupby(['Ann√©e', 'Mois'])['Budget'].sum().reset_index()
            monthly_trends = monthly_trends.sort_values(['Ann√©e', 'Mois'])
            
            story.append(Paragraph("üìà TENDANCES MENSUELLES", styles['Heading2']))
            story.append(Paragraph(f"Croissance moyenne mensuelle: {self.data_insights.get('budget_trends', {}).get('avg_growth', 0):.2f}%", styles['Normal']))
            story.append(Spacer(1, 20))
            
            # Top 5 des centres de profit
            top_profit_centers = filtered_data.groupby('Centre_de_profit')['Budget'].sum().nlargest(5).reset_index()
            
            story.append(Paragraph("üèÜ TOP 5 CENTRES DE PROFIT", styles['Heading2']))
            profit_table_data = [['Centre de Profit', 'Budget Total (TND)']]
            for _, row in top_profit_centers.iterrows():
                profit_table_data.append([
                    row['Centre_de_profit'],
                    f"{row['Budget']:,.0f}"
                ])
            
            profit_table = Table(profit_table_data)
            profit_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(profit_table)
            story.append(Spacer(1, 20))
            
            # Analyse des statuts de budget
            status_analysis = filtered_data.groupby('Statut_budget').size().reset_index()
            status_analysis.columns = ['Statut', 'Nombre']
            
            story.append(Paragraph("‚úÖ ANALYSE DES STATUTS", styles['Heading2']))
            status_table_data = [['Statut', 'Nombre', 'Pourcentage']]
            total_records = len(filtered_data)
            for _, row in status_analysis.iterrows():
                percentage = (row['Nombre'] / total_records) * 100
                status_table_data.append([
                    row['Statut'],
                    str(row['Nombre']),
                    f"{percentage:.1f}%"
                ])
            
            status_table = Table(status_table_data)
            status_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(status_table)
            story.append(Spacer(1, 20))
            
            # Recommandations
            story.append(Paragraph("üí° RECOMMANDATIONS", styles['Heading2']))
            
            # Analyser les budgets rejet√©s
            rejected_rate = (filtered_data['Statut_budget'] == 'Rejet√©').mean() * 100
            if rejected_rate > 20:
                story.append(Paragraph(f"‚Ä¢ Taux de rejet √©lev√© ({rejected_rate:.1f}%) - R√©viser les crit√®res d'approbation", styles['Normal']))
            
            # Analyser la r√©partition des entit√©s
            entity_std = entity_summary['Total'].std()
            entity_mean = entity_summary['Total'].mean()
            if entity_std > entity_mean * 0.5:
                story.append(Paragraph("‚Ä¢ D√©s√©quilibre budg√©taire entre entit√©s - Consid√©rer une redistribution", styles['Normal']))
            
            # Analyser les cat√©gories
            revenue_ratio = filtered_data[filtered_data['cat√©gorie_compte'] == 'REVENUE']['Budget'].sum() / total_budget
            if revenue_ratio < 0.4:
                story.append(Paragraph(f"‚Ä¢ Faible part des revenus ({revenue_ratio:.1%}) - Renforcer les sources de revenus", styles['Normal']))
            
            story.append(Spacer(1, 20))
            
            # Footer
            story.append(Paragraph(f"Rapport g√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}", styles['Normal']))
            
            # Construire le PDF
            doc.build(story)
            
            return filename
            
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration PDF: {str(e)}")
            return None
    
   
    
    def get_quick_stats(self):
        """Retourne des statistiques rapides"""
        if self.df is None or self.df.empty:
            return {}
        
        try:
            stats = {
                'total_records': len(self.df),
                'total_budget': self.df['Budget'].sum(),
                'avg_budget': self.df['Budget'].mean(),
                'date_range': {
                    'start': self.df['Date'].min().strftime('%Y-%m-%d'),
                    'end': self.df['Date'].max().strftime('%Y-%m-%d')
                },
                'entities': self.df['Entit√©'].nunique(),
                'top_entity': self.df.groupby('Entit√©')['Budget'].sum().idxmax().replace('POSTE_TN_REGION_', ''),
                'approval_rate': (self.df['Statut_budget'] == 'Approuv√©').mean() * 100,
                'forecast_percentage': (self.df['is_forecast'] == 1).mean() * 100,
                'revenue_share': (self.df[self.df['cat√©gorie_compte'] == 'REVENUE']['Budget'].sum() / self.df['Budget'].sum()) * 100
            }
            return stats
        except Exception as e:
            print(f"‚ùå Erreur calcul stats: {str(e)}")
            return {}
    
    def export_data_excel(self, filtered_data=None, filename=None):
        """Exporte les donn√©es vers Excel avec formatage"""
        try:
            if filtered_data is None:
                filtered_data = self.df
            
            if filename is None:
                filename = f"export_poste_tunisienne_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                # Feuille principale avec toutes les donn√©es
                filtered_data.to_excel(writer, sheet_name='Donn√©es_Compl√®tes', index=False)
                
                # Feuille r√©sum√© par entit√©
                entity_summary = filtered_data.groupby('Entit√©').agg({
                    'Budget': ['sum', 'mean', 'count'],
                    'Date': ['min', 'max']
                }).round(2)
                entity_summary.to_excel(writer, sheet_name='R√©sum√©_Entit√©s')
                
                # Feuille r√©sum√© par cat√©gorie
                category_summary = filtered_data.groupby('cat√©gorie_compte').agg({
                    'Budget': ['sum', 'mean', 'count']
                }).round(2)
                category_summary.to_excel(writer, sheet_name='R√©sum√©_Cat√©gories')
                
                # Feuille tendances mensuelles
                monthly_summary = filtered_data.groupby(['Ann√©e', 'Mois']).agg({
                    'Budget': 'sum'
                }).reset_index()
                monthly_summary.to_excel(writer, sheet_name='Tendances_Mensuelles', index=False)
            
            return filename
            
        except Exception as e:
            print(f"‚ùå Erreur export Excel: {str(e)}")
            return None
    
    def process_user_query(self, message):
        """Traite la requ√™te utilisateur avec analyse compl√®te"""
        try:
            # R√©ponse de base du chatbot
            response = self.chat_with_groq(message)
            
            # G√©n√©rer des alertes intelligentes
            alerts = self.generate_smart_alerts(response, message)
            
            # G√©n√©rer des suggestions
            suggestions = self.generate_smart_suggestions(response, message)
            
            # Statistiques rapides si demand√©es
            stats = None
            if any(word in message.lower() for word in ['statistique', 'r√©sum√©', 'stats', 'summary']):
                stats = self.get_quick_stats()
            
            return {
                'response': response,
                'alerts': alerts,
                'suggestions': suggestions,
                'stats': stats,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            return {
                'response': f"‚ùå Erreur lors du traitement: {str(e)}",
                'alerts': [],
                'suggestions': [],
                'stats': None,
                'timestamp': datetime.now().isoformat()
            }
    
    def get_conversation_summary(self):
        """Retourne un r√©sum√© de la conversation"""
        if not self.conversation_history:
            return "Aucune conversation enregistr√©e."
        
        try:
            total_questions = len(self.conversation_history)
            languages_used = list(set([item.get('language', 'french') for item in self.conversation_history]))
            recent_topics = []
            
            # Extraire les sujets des derni√®res questions
            for item in self.conversation_history[-5:]:
                question = item.get('question', '').lower()
                if 'budget' in question:
                    recent_topics.append('Budget')
                elif any(word in question for word in ['entit√©', 'r√©gion', 'entity']):
                    recent_topics.append('Entit√©s')
                elif any(word in question for word in ['pr√©vision', 'forecast']):
                    recent_topics.append('Pr√©visions')
                elif 'ramadan' in question:
                    recent_topics.append('Ramadan')
            
            summary = f"""
            üìä R√©sum√© de la conversation:
            ‚Ä¢ Nombre total de questions: {total_questions}
            ‚Ä¢ Langues utilis√©es: {', '.join(languages_used)}
            ‚Ä¢ Sujets r√©cents: {', '.join(set(recent_topics)) if recent_topics else 'G√©n√©ral'}
            ‚Ä¢ Derni√®re interaction: {self.conversation_history[-1]['timestamp'].strftime('%d/%m/%Y %H:%M')}
            """
            
            return summary.strip()
            
        except Exception as e:
            return f"‚ùå Erreur g√©n√©ration r√©sum√©: {str(e)}"

# Fonction d'initialisation
def initialize_bot():
    """Initialise le bot avec gestion d'erreurs"""
    try:
        bot = PosteTunisienneBot()
        if bot.df is not None and not bot.df.empty:
            print("ü§ñ Bot initialis√© avec succ√®s!")
            return bot
        else:
            print("‚ö†Ô∏è Bot initialis√© mais aucune donn√©e charg√©e")
            return bot
    except Exception as e:
        print(f"‚ùå Erreur initialisation bot: {str(e)}")
        return None

# Exemple d'utilisation
if __name__ == "__main__":
    # Initialiser le bot
    bot = initialize_bot()
    
    if bot:
        print("\n" + "="*50)
        print("ü§ñ CHATBOT LA POSTE TUNISIENNE - PR√äT")
        print("="*50)
        
        # Afficher les statistiques de base
        stats = bot.get_quick_stats()
        if stats:
            print(f"üìä {stats['total_records']} enregistrements charg√©s")
            print(f"üí∞ Budget total: {stats['total_budget']:,.0f} TND")
            print(f"üìÖ P√©riode: {stats['date_range']['start']} - {stats['date_range']['end']}")
        
        # Boucle de conversation
        while True:
            try:
                user_input = input("\nüí¨ Votre question (ou 'quit' pour quitter): ").strip()
                
                if user_input.lower() in ['quit', 'exit', 'bye', 'au revoir']:
                    print("üëã Au revoir! Merci d'avoir utilis√© le chatbot.")
                    break
                
                if user_input:
                    # Traiter la requ√™te
                    result = bot.process_user_query(user_input)
                    
                    # Afficher la r√©ponse
                    print(f"\nü§ñ {result['response']}")
                    
                    # Afficher les alertes
                    if result['alerts']:
                        print("\nüö® ALERTES:")
                        for alert in result['alerts']:
                            print(f"   {alert}")
                    
                    # Afficher les suggestions
                    if result['suggestions']:
                        print("\nüí° SUGGESTIONS:")
                        for suggestion in result['suggestions']:
                            print(f"   {suggestion}")
                    
                    # Afficher les stats si disponibles
                    if result['stats']:
                        print(f"\nüìà STATS RAPIDES:")
                        print(f"   Taux d'approbation: {result['stats']['approval_rate']:.1f}%")
                        print(f"   Part des revenus: {result['stats']['revenue_share']:.1f}%")
                
            except KeyboardInterrupt:
                print("\nüëã Au revoir!")
                break
            except Exception as e:
                print(f"\n‚ùå Erreur: {str(e)}")
    else:
        print("‚ùå Impossible d'initialiser le bot")